public class QueryBuilder {
	private String finalQuery;

	// takes every search menu option in string form and builds query from it
	public QueryBuilder(String course, String session, String filter, String x, 
						String orderBy, String order, String ignore) {
		// get all the pieces of the query
		String selectionClauses = selectionClauses(course, session);
		String filterQuery = filterQuery(filter, x);
		String orderByClause = orderByClause(orderBy, order);
		String ignoreClause = ignoreClauses(ignore);
		// put the pieces together
		finalQuery(selectionClauses, filterQuery, orderByClause, ignoreClause);
	}
	
	// return the query we built
	public String getQuery() {
		return finalQuery;
	}
	
	// generate the where clauses based on user's course and session selection and return them
	private String selectionClauses(String course, String session) {
		// if no course or session is selected, return an empty string
		String clauses = "";
		
		// where clause for course selection
		if(!course.equalsIgnoreCase("All")) {
			clauses += "course_name = \"" + course + "\" AND ";
		}
		
		// where clause for session selection
		if(!session.equalsIgnoreCase("All")) {
			clauses += "session_id = " + session + " AND ";
		}
		
 		return clauses;
	}
	
	/* Returns the full query except for the order by line and the where clauses
	 * generated by the user's selection for session, class and ignore
	 */
	private String filterQuery(String filter, String x) {
		// return basic query if user doesn't select a filter
		if (filter.equalsIgnoreCase("All")){
			return "Select questions.id\n" +
					"From questions\n" +
					"Inner join sessions\n" +
					"On questions.session_id = sessions.id\n" +
					"Inner join courses\n" +
					"On courses.id = sessions.course_id\n" +
					"WHERE 1=1\n";
		}
		
		// if selected filter is one of the 2 options based on percent of correct answers...
		if (filter.contains("correct")) {
			String sign = "";
			
			// figure out if query will use ">" or "<"
			if (filter.contains("less")) {
				sign = "<";
			}
			if (filter.contains("more")) {
				sign = ">";
			}
			else {
				// TODO give error
			}
			
			// pass user input X value and ">" or "<" to string builder method
			return correctnessQuery(sign, x);
		}
		
		else {
			// TODO give error
		}
		return "";
	}
	
	/* Build filter query when user selects 1 of 2 filters based on percent of correct answers
	 * (Order by and where clauses not present)
	 */
	private String correctnessQuery(String sign, String x) {
		return "SELECT questions.id\n" +
				"FROM questions INNER JOIN sessions ON (sessions.id = questions.session_id)\n" +
				"INNER JOIN courses ON (courses.id = sessions.course_id)\n" +
				"INNER JOIN (\n" +
				"SELECT total.question_id, ((correct.cnt/total.cnt)*100) as percent\n" + 
				"FROM (\n" + 
				"SELECT question_id, count(question_id) as cnt \n" + 
				"from votes join questions on questions.id=votes.question_id\n" + 
				"GROUP BY question_id\n" + 
				") AS total\n" + 
				"INNER JOIN (\n" + 
				"SELECT question_id, count(question_id) as cnt\n" +  
				"from votes join questions on questions.id=votes.question_id\n" +  
				"WHERE votes.fans = questions.answer\n" + 
				"GROUP BY question_id\n" + 
				") AS correct\n" + 
				"ON total.question_id = correct.question_id\n" + 
				"WHERE 1=1\n" +
				"HAVING percent " + sign + x + ") AS sub\n" +
				"ON questions.id = sub.question_id\n" +
				"WHERE 1=1\n";
	}
	
	private String orderByClause(String orderBy, String order) {
		String clause = "";
		if(orderBy.equalsIgnoreCase("Chronological")) {
			if(order.equalsIgnoreCase("ASC")) {
				 clause= "Order By"+" sessions.date, questions.start_time "+"ASC";		
			}
			if(order.equalsIgnoreCase("DESC")) {
				clause= "Order By"+" sessions.date, questions.start_time "+"DESC";
			}
			else {
				// TODO give error
			}
		}
		
		if(orderBy.contains("Correctness")) {
			if(order.equalsIgnoreCase("ASC")) {
				// TODO return order by clause
				clause= "Order By"+ " percent "+"ASC";
			}
			if(order.equalsIgnoreCase("DESC")) {
				// TODO return order by clause
				clause= "Order By"+" percent "+"DESC";
			}
			else {
				// TODO give error
			}
		}
		return clause;
	}
	
	// forget about this for now
	private String ignoreClauses(String ignore) {
		// return empty string if no ignore options are selected
		if (ignore.equals("")) { 
			return "";
		}
		// TODO
		return "";
	}

	// puts all the pieces together into one query
	private void finalQuery(String selectionClauses, String filterQuery, 
							String orderByClause, String ignoreClauses) {
		// Inserts class and session where clauses after the last "WHERE"
		// Will need to be changed if we have a filter query where last "WHERE" is in a subquery
		String half1 = filterQuery.substring(0, filterQuery.lastIndexOf("WHERE")+6);
		String half2 = filterQuery.substring(filterQuery.lastIndexOf("WHERE")+6);
		finalQuery = half1 + selectionClauses + half2 + orderByClause;
		// TODO ignore clause to query
	}
	
	// for testing purposes
	public static void main(String[] args) {
		String course = "CS 141 FALL 2016";
		String session = "2";
		QueryBuilder qb = new QueryBuilder(course, session, " correct more ", "3", "correct",
				"Descending", "");
		System.out.println(qb.getQuery());
	}
	
}
